
// @function rem($pixel){
//   @if math.is-unitless($pixel){
//     @return math.div($pixel/16) + rem;
//   }@else{
//     @error 'Dont use units when using the rem()'
//   }
// };
@function toRem($value) {
  $remValue: ($value / 16) + rem; 
  @return $remValue;
}
:root {
  @each $color, $shades in $colors {
    @each $shade, $value in $shades {
      --clr-#{$color}-#{$shade}: #{$value};
    } 
  }

  
  --fs-sm: clamp(0.88rem, calc(0.88rem + 0.00vw), 0.88rem);
  --fs-md: clamp(0.795rem, calc(0.775rem + 0.00vw), 0.8rem);
  --fs-body: clamp(toRem(13), calc(toRem(12) + 0.19vw), toRem(14));
  --fs-lg: clamp(0.88rem, calc(0.84rem + 0.19vw), 1.00rem);
  --fs-h6: clamp(1rem, .975rem + 0.07vw, 1.1rem);
  --fs-h5: clamp(1.1rem, 1rem + 0.16vw, 1.2rem);
  --fs-h4: clamp(1.31rem, 1.2rem + 0.3vw, 1.5rem);
  --fs-h3: clamp(1.7rem, 1.5rem + 0.49vw, 2rem);
  --fs-h2: clamp(2.18rem, 2.03rem + 0.75vw, 2.75rem);
  // --fs-h2: clamp(u.rem(34.88), calc(u.rem(28) + 0.19vw), u.rem(44));
  --fs-h1: clamp(2.61rem, 2.39rem + 1.11vw, 3.875rem);

  // @each $screen-size,
  // $font-size in $type-scale {
  //     @if $screen-size==small {
  //         @each $size,
  //         $value in $font-size {
  //             --fs-#{$size}:#{$value};
  //         }
  //     }
  //     @else {
  //         @include mq(small) {
  //             @each $size,
  //             $value in $font-size {
  //                 --fs-#{$size}:#{$value};
  //             }
  //         }
  //     }
  // }
}

// @each $color, $shades in $colors {
//   @each $shade, $value in $shades {
//     .text-#{$color}-#{$shade} {
//       color: $value;
//     }
//     .bg-#{$color}-#{$shade} {
//       color: $value;
//     }
//   }
// }






